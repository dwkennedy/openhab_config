val logName = "Time Of Day"

rule "Calculate time of day state" 
when
  System started or // run at system start in case the time changed when OH was offline
  Channel 'astro:sun:local:rise#event'    triggered START or
  Channel 'astro:sun:local:nauticDusk#event'     triggered START or
  Time cron "0 1 0 * * ? *" or // one minute after midnight so give Astro time to calculate the new day's times
  Time cron "0 0 22 * * ? *"
then

  logInfo(logName, "Calculating time of day...")

  // Calculate the times for the static tods and populate the associated Items
  // Update when changing static times
  // Jump to tomorrow and subtract to avoid problems at the change over to/from DST
  //val morning_start = now.withTimeAtStartOfDay.plusDays(1).minusHours(18)
  //vMorning_Time.postUpdate(morning_start.toString)

  //val night_start = now.withTimeAtStartOfDay.plusDays(1).minusHours(1)
  //vNight_Time.postUpdate(night_start.toString)

  val bed_start = now.withTimeAtStartOfDay.plusDays(1).minusHours(2)
  vBed_Time.postUpdate(bed_start.toString)

  // Convert the Astro Items to Joda DateTime
  val day_start = new DateTime(vSunrise_Time.state.toString).plusMinutes(40)
  val tomorrow_day_start = day_start.plusHours(24)
  val evening_start = new DateTime(vSunset_Time.state.toString)
  //val afternoon_start = new DateTime(vEvening_Time.state.toString)

  // Calculate the current time of day
  var curr = "UNKNOWN"
  switch now {
  	//case now.isAfter(morning_start)   && now.isBefore(day_start):       curr = "MORNING"
  	case now.isAfter(day_start)       && now.isBefore(evening_start):	curr = "DAY"
  	//case now.isAfter(afternoon_start) && now.isBefore(evening_start):   curr = "AFTERNOON"
  	case now.isAfter(evening_start)   && now.isBefore(bed_start):     curr = "NIGHT"
  	//case now.isAfter(night_start):                                      curr = "NIGHT"
  	case now.isAfter(bed_start)       && now.isBefore(tomorrow_day_start):   curr = "BED"
  }

  // Publish the current state
  logInfo(logName, "Calculated time of day is " + curr)
  if (vTimeOfDay.state.toString != curr) {
     vTimeOfDay.sendCommand(curr)
  }
end

